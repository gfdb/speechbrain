# ############################################################################
# Model: E2E ASR with Transformer
# Encoder: Transformer Encoder
# Decoder: Transformer Decoder + (CTC/ATT joint) beamsearch + TransformerLM
# Tokens: unigram
# losses: CTC + KLdiv (Label Smoothing loss)
# Training: Librispeech 960h
# Authors:  Jianyuan Zhong, Titouan Parcollet, Samuele Cornell
# ############################################################################
# Seed needs to be set at top of yaml, before objects with parameters are made

seed: 74443
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/librispeech100h/ablation/<seed>
output_wer_folder: !ref <output_folder>/
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Language model (LM) pretraining
# NB: To avoid mismatch, the speech recognizer must be trained with the same
# tokenizer used for LM training. Here, we download everything from the
# speechbrain HuggingFace repository. However, a local path pointing to a
# directory containing the lm.ckpt and tokenizer.ckpt may also be specified
# instead. E.g if you want to use your own LM / tokenizer.
pretrained_lm_tokenizer_path: sb-asr-transformer-transformerlm-librispeech

# Data files
data_folder: !PLACEHOLDER # e.g., /path/to/LibriSpeech
data_folder_noise: !ref <data_folder>/noise # The noisy sequencies for data augmentation will automatically be downloaded here.
data_folder_rir: !ref <data_folder>/rir # The impulse responses used for data augmentation will automatically be downloaded here.

# Data for augmentation
NOISE_DATASET_URL: https://www.dropbox.com/scl/fi/a09pj97s5ifan81dqhi4n/noises.zip?rlkey=j8b0n9kdjdr32o1f06t0cw5b7&dl=1
RIR_DATASET_URL: https://www.dropbox.com/scl/fi/linhy77c36mu10965a836/RIRs.zip?rlkey=pg9cu8vrpn2u173vhiqyu743u&dl=1

# Data-manifest files
train_splits: ["train-clean-100"]
dev_splits: ["dev-clean"]
test_splits: ["test-clean"]
skip_prep: False
train_csv: !ref <output_folder>/train.csv
valid_csv: !ref <output_folder>/dev-clean.csv
test_csv:
    - !ref <output_folder>/test-clean.csv

noise_annotation: ../noise.csv
rir_annotation: ../rir.csv

ckpt_interval_minutes: 30 # save checkpoint every N min

# NOTE ON DATA AUGMENTATION
# This template demonstrates the use of all available data augmentation strategies
# to illustrate how they work and how you can combine them with the augmenter.
# In practical applications (e.g., refer to other recipes), it is usually advisable
# to select a subset of these strategies for better performance.

# Waveform Augmentation Functions
snr_low: 0  # Min SNR for noise augmentation
snr_high: 10  # Max SNR for noise augmentation
speed_changes: [90, 100, 110]  # List of speed changes for time-stretching
drop_freq_low: 0  # Min frequency band dropout probability
drop_freq_high: 1  # Max frequency band dropout probability (1.0 is the largest freq)
drop_freq_count_low: 1  # Min number of frequency bands to drop
drop_freq_count_high: 8  # Max number of frequency bands to drop
drop_freq_width: 0.1  # Width of frequency bands to drop
drop_chunk_count_low: 1  # Min number of audio chunks to drop
drop_chunk_count_high: 8  # Max number of audio chunks to drop
drop_chunk_length_low: 0  # Min length of audio chunks to drop
drop_chunk_length_high: 4000  # Max length of audio chunks to drop
clip_low: 0  # Min amplitude to clip
clip_high: 0.75  # Max amplitude to clip
amp_low: 0.05  # Min waveform amplitude
amp_high: 0.5  # Max waveform amplitude
babble_snr_low: 0  # Min SNR for babble (batch sum noise)
babble_snr_high: 20  # Max SNR for babble (batch sum noise)

# Feature Augmentation Functions
min_time_shift: 0  # Min random shift of spectrogram in time
max_time_shift: 15  # Max random shift of spectrogram in time
min_freq_shift: 0  # Min random shift of spectrogram in frequency
max_freq_shift: 2  # Max random shift of spectrogram in frequency
time_drop_length_low: 0  # Min length for temporal chunk to drop in spectrogram
time_drop_length_high: 25  # Max length for temporal chunk to drop in spectrogram
time_drop_count_low: 0  # Min number of chunks to drop in time in the spectrogram
time_drop_count_high: 2  # Max number of chunks to drop in time in the spectrogram
time_drop_replace: "zeros"  # Method of dropping chunks
freq_drop_length_low: 0  # Min length for chunks to drop in frequency in the spectrogram
freq_drop_length_high: 8  # Max length for chunks to drop in frequency in the spectrogram
freq_drop_count_low: 0  # Min number of chunks to drop in frequency in the spectrogram
freq_drop_count_high: 8  # Max number of chunks to drop in frequency in the spectrogram
freq_drop_replace: "cutcat"  # Method of dropping chunks
time_warp_window: 20  # Length of time warping window
time_warp_mode: "bicubic"  # Time warping method
freq_warp_window: 4  # Length of frequency warping window
freq_warp_mode: "bicubic"  # Frequency warping method

# Enable Waveform Augmentation Flags (useful for hyperparameter tuning)
enable_codec_augment: False
enable_add_reverb: False
enable_add_noise: True
enable_speed_perturb: True
enable_drop_freq: True
enable_drop_chunk: True
enable_clipping: True
enable_rand_amp: True
enable_babble_noise: True
enable_drop_resolution: False
enable_sign_flip: True
enable_chunk_swap: True

# Enable Feature Augmentations Flags (useful for hyperparameter tuning)
enable_time_shift: False
enable_freq_shift: False
enable_time_drop: False
enable_freq_drop: False
enable_time_warp: False
enable_freq_warp: False

# Waveform Augmenter (combining augmentations)
time_parallel_augment: False  # Apply augmentations in parallel if True, or sequentially if False
time_concat_original: True  # Concatenate original signals to the training batch if True
time_repeat_augment: 1  # Number of times to apply augmentation
time_shuffle_augmentations: True  # Shuffle order of augmentations if True, else use specified order
time_min_augmentations: 1  # Min number of augmentations to apply
time_max_augmentations: 1  # Max number of augmentations to apply
time_augment_prob: 1.0     # Probability to apply time augmentation

# Feature Augmenter (combining augmentations)
fea_parallel_augment: False  # Apply feature augmentations in parallel if True, or sequentially if False
fea_concat_original: True  # Concatenate original signals to the training batch if True
fea_repeat_augment: 1  # Number of times to apply feature augmentation
fea_shuffle_augmentations: True  # Shuffle order of feature augmentations if True, else use specified order
fea_min_augmentations: 0  # Min number of feature augmentations to apply
fea_max_augmentations: 0  # Max number of feature augmentations to app
fea_augment_prob: 1.0     # Probability to apply feature augmentation


# Training parameters
# To make Transformers converge, the global bath size should be large enough.
# The global batch size is computed as batch_size * n_gpus * grad_accumulation_factor.
# Empirically, we found that this value should be >= 128.
# Please, set your parameters accordingly.
number_of_epochs: 100
batch_size: 32 # This works for 1x GPU with 40GB with no dynamic batching
ctc_weight: 0.3
grad_accumulation_factor: 1
max_grad_norm: 5.0
loss_reduction: 'batchmean'
sorting: random
num_workers: 4
precision: fp32 # bf16, fp16 or fp32
avg_checkpoints: 10 # Number of checkpoints to average for evaluation

# index
pad_index: 0
bos_index: 1
eos_index: 2

# This setup works well for V100 32GB GPU, adapts it to your needs.
# Or turn it off (but training speed will decrease)
dynamic_batching: True
max_batch_length_train: 300
max_batch_length_val: 100 # we reduce it as the beam is much wider (VRAM)
num_bucket: 200
shuffle: True  # if true re-creates batches at each epoch shuffling examples.
batch_ordering: random
max_batch_ex: 128

dynamic_batch_sampler_train:
    max_batch_length: !ref <max_batch_length_train>
    num_buckets: !ref <num_bucket>
    shuffle: !ref <shuffle>
    batch_ordering: !ref <batch_ordering>
    max_batch_ex: !ref <max_batch_ex>

dynamic_batch_sampler_valid:
    max_batch_length: !ref <max_batch_length_val>
    num_buckets: !ref <num_bucket>
    shuffle: !ref <shuffle>
    batch_ordering: !ref <batch_ordering>
    max_batch_ex: !ref <max_batch_ex>

# stages related parameters
lr_adam: 0.001

# Feature parameters
sample_rate: 16000
n_fft: 400
n_mels: 80

# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    shuffle: True
    num_workers: !ref <num_workers>
    collate_fn: !name:speechbrain.dataio.batch.PaddedBatch
        padding_kwargs:
            value: !ref <pad_index>

valid_dataloader_opts:
    batch_size: 1
    collate_fn: !name:speechbrain.dataio.batch.PaddedBatch
        padding_kwargs:
            value: !ref <pad_index>

test_dataloader_opts:
    batch_size: 1
    collate_fn: !name:speechbrain.dataio.batch.PaddedBatch
        padding_kwargs:
            value: !ref <pad_index>

####################### Model parameters ###########################
# Transformer
d_model: 512
nhead: 4
num_encoder_layers: 12
num_decoder_layers: 6
d_ffn: 2048
transformer_dropout: 0.1
activation: !name:torch.nn.GELU
output_neurons: 5000

# Outputs
blank_index: 0
label_smoothing: 0.0

# Decoding parameters
min_decode_ratio: 0.0
max_decode_ratio: 1.0
valid_search_interval: 10
valid_beam_size: 10
test_beam_size: 66

# Scoring parameters
lm_weight: 0
ctc_weight_decode: 0.40

# Download and prepare the dataset of noisy sequences for augmentation
prepare_noise_data: !name:speechbrain.augment.preparation.prepare_dataset_from_URL
    URL: !ref <NOISE_DATASET_URL>
    dest_folder: !ref <data_folder_noise>
    ext: wav
    csv_file: !ref <noise_annotation>

# Download and prepare the dataset of room impulse responses for augmentation
prepare_rir_data: !name:speechbrain.augment.preparation.prepare_dataset_from_URL
    URL: !ref <RIR_DATASET_URL>
    dest_folder: !ref <data_folder_rir>
    ext: wav
    csv_file: !ref <rir_annotation>
    
    
# ----- WAVEFORM AUGMENTATION ----- #

# Codec augmentation
codec_augment: !new:speechbrain.augment.codec.CodecAugment
    sample_rate: !ref <sample_rate>

# Add reverberation to input signal
add_reverb: !new:speechbrain.augment.time_domain.AddReverb
    csv_file: !ref <rir_annotation>
    reverb_sample_rate: !ref <sample_rate>
    clean_sample_rate: !ref <sample_rate>
    num_workers: !ref <num_workers>

# Add noise to input signal
add_noise: !new:speechbrain.augment.time_domain.AddNoise
    csv_file: !ref <noise_annotation>
    snr_low: !ref <snr_low>
    snr_high: !ref <snr_high>
    noise_sample_rate: !ref <sample_rate>
    clean_sample_rate: !ref <sample_rate>
    num_workers: !ref <num_workers>

# Speed perturbation
speed_perturb: !new:speechbrain.augment.time_domain.SpeedPerturb
    orig_freq: !ref <sample_rate>
    speeds: !ref <speed_changes>

# Frequency drop: randomly drops a number of frequency bands to zero.
drop_freq: !new:speechbrain.augment.time_domain.DropFreq
    drop_freq_low: !ref <drop_freq_low>
    drop_freq_high: !ref <drop_freq_high>
    drop_freq_count_low: !ref <drop_freq_count_low>
    drop_freq_count_high: !ref <drop_freq_count_high>
    drop_freq_width: !ref <drop_freq_width>

# Time drop: randomly drops a number of temporal chunks.
drop_chunk: !new:speechbrain.augment.time_domain.DropChunk
    drop_length_low: !ref <drop_chunk_length_low>
    drop_length_high: !ref <drop_chunk_length_high>
    drop_count_low: !ref <drop_chunk_count_low>
    drop_count_high: !ref <drop_chunk_count_high>

# Clipping
clipping: !new:speechbrain.augment.time_domain.DoClip
    clip_low: !ref <clip_low>
    clip_high: !ref <clip_high>

# Random Amplitude
rand_amp: !new:speechbrain.augment.time_domain.RandAmp
    amp_low: !ref <amp_low>
    amp_high: !ref <amp_high>


# SignFlip
sign_flip_prob: 0.6
sign_flip: !new:speechbrain.augment.time_domain.SignFlip
    flip_prob: !ref <sign_flip_prob>


# ChunkSwap
chunk_size_frac: 0.02
num_chunks: 2
chunk_swap: !new:speechbrain.augment.time_domain.ChunkSwap
    num_chunks: !ref <num_chunks>
    chunk_size_frac: !ref <chunk_size_frac>


# Noise sequence derived by summing up all the signals in the batch
# It is similar to babble noise
sum_batch: !name:torch.sum
    dim: 0
    keepdim: True

babble_noise: !new:speechbrain.augment.time_domain.AddNoise
    snr_low: !ref <babble_snr_low>
    snr_high: !ref <babble_snr_high>
    noise_funct: !ref <sum_batch>

drop_resolution: !new:speechbrain.augment.time_domain.DropBitResolution
    target_dtype: 'random'


# Augmenter: Combines previously defined augmentations to perform data augmentation
wav_augment: !new:speechbrain.augment.augmenter.Augmenter
    parallel_augment: !ref <time_parallel_augment>
    concat_original: !ref <time_concat_original>
    repeat_augment: !ref <time_repeat_augment>
    shuffle_augmentations: !ref <time_shuffle_augmentations>
    min_augmentations: !ref <time_min_augmentations>
    max_augmentations: !ref <time_max_augmentations>
    augment_prob: !ref <time_augment_prob>
    augmentations: [
        !ref <codec_augment>,
        !ref <add_reverb>,
        !ref <add_noise>,
        !ref <babble_noise>,
        !ref <speed_perturb>,
        !ref <clipping>,
        !ref <drop_freq>,
        !ref <drop_chunk>,
        !ref <rand_amp>,
        !ref <drop_resolution>,
        !ref <sign_flip>,
        !ref <chunk_swap>]
    enable_augmentations: [
        !ref <enable_codec_augment>,
        !ref <enable_add_reverb>,
        !ref <enable_add_noise>,
        !ref <enable_babble_noise>,
        !ref <enable_speed_perturb>,
        !ref <enable_clipping>,
        !ref <enable_drop_freq>,
        !ref <enable_drop_chunk>,
        !ref <enable_rand_amp>,
        !ref <enable_drop_resolution>,
        !ref <enable_sign_flip>,
        !ref <enable_chunk_swap>]


# ----- FEATURE AUGMENTATION ----- #

# Time shift
time_shift: !new:speechbrain.augment.freq_domain.RandomShift
    min_shift: !ref <min_time_shift>
    max_shift: !ref <max_time_shift>
    dim: 1

# Frequency shift
freq_shift: !new:speechbrain.augment.freq_domain.RandomShift
    min_shift: !ref <min_freq_shift>
    max_shift: !ref <max_freq_shift>
    dim: 2

# Time Drop
time_drop: !new:speechbrain.augment.freq_domain.SpectrogramDrop
    drop_length_low: !ref <time_drop_length_low>
    drop_length_high: !ref <time_drop_length_high>
    drop_count_low: !ref <time_drop_count_low>
    drop_count_high: !ref <time_drop_count_high>
    replace: !ref <time_drop_replace>
    dim: 1

# Frequency Drop
freq_drop: !new:speechbrain.augment.freq_domain.SpectrogramDrop
    drop_length_low: !ref <freq_drop_length_low>
    drop_length_high: !ref <freq_drop_length_high>
    drop_count_low: !ref <freq_drop_count_low>
    drop_count_high: !ref <freq_drop_count_high>
    replace: !ref <freq_drop_replace>
    dim: 2

# Time warp
time_warp: !new:speechbrain.augment.freq_domain.Warping
    warp_window: !ref <time_warp_window>
    warp_mode: !ref <time_warp_mode>
    dim: 1

freq_warp: !new:speechbrain.augment.freq_domain.Warping
    warp_window: !ref <freq_warp_window>
    warp_mode: !ref <freq_warp_mode>
    dim: 2

fea_augment: !new:speechbrain.augment.augmenter.Augmenter
    parallel_augment: !ref <fea_parallel_augment>
    concat_original: !ref <fea_concat_original>
    repeat_augment: !ref <fea_repeat_augment>
    shuffle_augmentations: !ref <fea_shuffle_augmentations>
    min_augmentations: !ref <fea_min_augmentations>
    max_augmentations: !ref <fea_max_augmentations>
    augment_start_index: !ref <batch_size> # This leaves unchanges original inputs
    concat_end_index: !ref <batch_size> # This leaves unchanges original inputs
    augment_prob: !ref <fea_augment_prob>
    augmentations: [
        !ref <time_shift>,
        !ref <freq_shift>,
        !ref <time_drop>,
        !ref <freq_drop>,
        !ref <time_warp>]
    enable_augmentations: [
        !ref <enable_time_shift>,
        !ref <enable_freq_shift>,
        !ref <enable_time_drop>,
        !ref <enable_freq_drop>,
        !ref <enable_time_warp>]

############################## models ################################

CNN: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80)
    num_blocks: 3
    num_layers_per_block: 1
    out_channels: (64, 64, 64)
    kernel_sizes: (5, 5, 1)
    strides: (2, 2, 1)
    residuals: (False, False, True)

Transformer: !new:speechbrain.lobes.models.transformer.TransformerASR.TransformerASR # yamllint disable-line rule:line-length
    input_size: 1280
    tgt_vocab: !ref <output_neurons>
    d_model: !ref <d_model>
    nhead: !ref <nhead>
    num_encoder_layers: !ref <num_encoder_layers>
    num_decoder_layers: !ref <num_decoder_layers>
    d_ffn: !ref <d_ffn>
    dropout: !ref <transformer_dropout>
    activation: !ref <activation>
    encoder_module: transformer
    attention_type: regularMHA
    normalize_before: True
    causal: False

# This is the TransformerLM that is used according to the Huggingface repository
# Visit the HuggingFace model corresponding to the pretrained_lm_tokenizer_path
# For more details about the model!
# NB: It has to match the pre-trained TransformerLM!!
lm_model: !new:speechbrain.lobes.models.transformer.TransformerLM.TransformerLM # yamllint disable-line rule:line-length
    vocab: !ref <output_neurons>
    d_model: 768
    nhead: 12
    num_encoder_layers: 12
    num_decoder_layers: 0
    d_ffn: 3072
    dropout: 0.0
    activation: !name:torch.nn.GELU
    normalize_before: False

tokenizer: !new:sentencepiece.SentencePieceProcessor

ctc_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

seq_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

modules:
    CNN: !ref <CNN>
    Transformer: !ref <Transformer>
    seq_lin: !ref <seq_lin>
    ctc_lin: !ref <ctc_lin>
    normalize: !ref <normalize>

model: !new:torch.nn.ModuleList
    - [!ref <CNN>, !ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]

# define two optimizers here for two-stage training
Adam: !name:torch.optim.Adam
    lr: !ref <lr_adam>
    betas: (0.9, 0.98)
    eps: 0.000000001


# Scorer
ctc_scorer: !new:speechbrain.decoders.scorer.CTCScorer
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    ctc_fc: !ref <ctc_lin>

transformerlm_scorer: !new:speechbrain.decoders.scorer.TransformerLMScorer
    language_model: !ref <lm_model>
    temperature: 1.15

scorer_valid_search: !new:speechbrain.decoders.scorer.ScorerBuilder
    full_scorers: [!ref <ctc_scorer>]
    weights:
        ctc: !ref <ctc_weight_decode>

scorer_test_search: !new:speechbrain.decoders.scorer.ScorerBuilder
    full_scorers: [!ref <ctc_scorer>, !ref <transformerlm_scorer>]
    weights:
        ctc: !ref <ctc_weight_decode>
        transformerlm: !ref <lm_weight>

valid_search: !new:speechbrain.decoders.S2STransformerBeamSearcher
    modules: [!ref <Transformer>, !ref <seq_lin>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <valid_beam_size>
    using_eos_threshold: False
    length_normalization: True
    scorer: !ref <scorer_valid_search>

test_search: !new:speechbrain.decoders.S2STransformerBeamSearcher
    modules: [!ref <Transformer>, !ref <seq_lin>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>
    temperature: 1.15
    using_eos_threshold: False
    length_normalization: True
    scorer: !ref <scorer_test_search>

log_softmax: !new:torch.nn.LogSoftmax
    dim: -1

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>
    reduction: !ref <loss_reduction>

seq_cost: !name:speechbrain.nnet.losses.kldiv_loss
    label_smoothing: !ref <label_smoothing>
    reduction: !ref <loss_reduction>

noam_annealing: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr_adam>
    n_warmup_steps: 25000

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        noam_scheduler: !ref <noam_annealing>
        normalizer: !ref <normalize>
        counter: !ref <epoch_counter>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    n_mels: !ref <n_mels>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
acc_computer: !name:speechbrain.utils.Accuracy.AccuracyStats

# The pretrainer allows a mapping between pretrained files and instances that
# are declared in the yaml. E.g here, we will download the file lm.ckpt
# and it will be loaded into "lm" which is pointing to the <lm_model> defined
# before.
pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: !ref <save_folder>
    loadables:
        lm: !ref <lm_model>
        tokenizer: !ref <tokenizer>
    paths:
        lm: !ref <pretrained_lm_tokenizer_path>/lm.ckpt
        tokenizer: !ref <pretrained_lm_tokenizer_path>/tokenizer.ckpt
